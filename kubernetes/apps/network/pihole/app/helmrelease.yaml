##
# @author Adrian Amoroso
# @date   1 Sep 2024
#
# Pi-hole® is a DNS sinkhole that protects your devices from unwanted content, without installing any client-side software.
#
# For values associated with the mojo2600 pihole chart see
#   https://github.com/MoJo2600/pihole-kubernetes/blob/master/charts/pihole/values.yaml
#
# TODO use doh for DNS over SSL with cloudflared
#

---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: pihole
  namespace: networking
spec:
  interval: 15m
  chart:
    spec:
      chart: pihole
      version: 2.18.0
      sourceRef:
        kind: HelmRepository
        name: mojo2600
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    DNS1: 192.168.0.1         # pfsense router
    DNS2: 9.9.9.9             # Quad9
    adlists:
      - https://www.github.developerdan.com/hosts/lists/tracking-aggressive-extended.txt
      - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
    admin:
      existingSecret: pihole-secrets
      passwordKey: password
    affinity: {}
    antiaff:
      avoidRelease: pihole1
      enabled: false
      strict: true
    blacklist: {}
    customVolumes:
      config: {}
      enabled: false
    dnsmasq:
      customSettings:
        - server=/amoroso.name/192.168.0.81             # Set a custom forward nameserver for my cloudflare domain to be my gateway_vip address
        - local=/home.patrian.com/
        - domain=home.patrian.com
        # - rebind-domain-ok=/pitower.link/               # No idea what this is
        # - rebind-domain-ok=/amoroso.name  /               # No idea what this is
        # - rev-server=192.168.0.0/24,192.168.0.253         # not sure about this either
        # - rev-server=192.168.0.0/24,192.168.0.1         # not sure about this either
        # - server=/lan/192.168.0.253
        # - server=//192.168.0.253
        # - server=//192.168.0.1
      # upstreamServers:
      #   - server=/pitower.link/192.168.0.220
    dualStack:
      enabled: false
    extraEnvVars:
      DNSMASQ_USER: root
      # REV_SERVER: true
      # REV_SERVER_CIDR: 192.168.0.0/24
      # REV_SERVER_DOMAIN: lan
      # REV_SERVER_TARGET: 192.168.0.1
    extraEnvVarsSecret: {}
    ftl:
      MAXDBDAYS: 90
    hostNetwork: "false"
    hostname: ""
    image:
      pullPolicy: IfNotPresent
      repository: pihole/pihole
      tag: 2023.10.0
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/app-root: /admin
      enabled: true
      hosts:
        - pihole.${SECRET_DOMAIN}
      ingressClassName: internal
      path: /
      tls:
        - hosts:
            - pihole.${SECRET_DOMAIN}
          secretName: pihole-tls          # ??
    maxSurge: 1
    maxUnavailable: 0
    monitoring:
      podMonitor:
        enabled: true
      sidecar:
        enabled: true
        image:
          pullPolicy: IfNotPresent
          repository: ekofr/pihole-exporter
          tag: v0.4.0
        port: 9617
        resources:
          limits:
            memory: 128Mi
    # nodeSelector:
    #   kubernetes.io/arch: arm64
    persistentVolumeClaim:
      accessModes:
        - ReadWriteMany
      enabled: true
      size: 512Mi
      storageClass: ceph-filesystem
    # podAnnotations:
    #   prometheus.io/port: "9617"
    #   prometheus.io/path: /metrics
    #   prometheus.io/scrape: "true"
    podDnsConfig:
      enabled: true
      nameservers:
        - 127.0.0.1
        - 192.168.0.1
      policy: None
    privileged: "true"
    probes:
      liveness:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 60
        timeoutSeconds: 5
      readiness:
        enabled: true
        failureThreshold: 3
        initialDelaySeconds: 60
        timeoutSeconds: 5
    regex:
      - ^ad([sxv]?[0-9]*|system)[_.-]([^.[:space:]]+\.){1,}|[_.-]ad([sxv]?[0-9]*|system)[_.-]
      - ^(.+[_.-])?adse?rv(er?|ice)?s?[0-9]*[_.-]
      - ^(.+[_.-])?telemetry[_.-]
      - ^adim(age|g)s?[0-9]*[_.-]
      - ^adtrack(er|ing)?[0-9]*[_.-]
      - ^advert(s|is(ing|ements?))?[0-9]*[_.-]
      - ^aff(iliat(es?|ion))?[_.-]
      - ^analytics?[_.-]
      - ^banners?[_.-]
      - ^beacons?[0-9]*[_.-]
      - ^count(ers?)?[0-9]*[_.-]
      - ^mads\.
      - ^pixels?[-.]
      - ^stat(s|istics)?[0-9]*[_.-]
      - ^https?://([A-Za-z0-9.-]*\.)?clicks\.beap\.bc\.yahoo\.com/
      - ^https?://([A-Za-z0-9.-]*\.)?secure\.footprint\.net/
      - ^https?://([A-Za-z0-9.-]*\.)?match\.com/
      - ^https?://([A-Za-z0-9.-]*\.)?clicks\.beap\.bc\.yahoo(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?sitescout(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?appnexus(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?evidon(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?mediamath(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?scorecardresearch(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?doubleclick(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?flashtalking(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?turn(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?mathtag(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?googlesyndication(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?s\.yimg\.com/cv/ae/us/audience/
      - ^https?://([A-Za-z0-9.-]*\.)?clicks\.beap/
      - ^https?://([A-Za-z0-9.-]*\.)?.doubleclick(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?yieldmanager(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?w55c(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?adnxs(\.\w{2}\.\w{2}|\.\w{2,4})/
      - ^https?://([A-Za-z0-9.-]*\.)?advertising\.com/
      - ^https?://([A-Za-z0-9.-]*\.)?evidon\.com/
      - ^https?://([A-Za-z0-9.-]*\.)?scorecardresearch\.com/
      - ^https?://([A-Za-z0-9.-]*\.)?flashtalking\.com/
      - ^https?://([A-Za-z0-9.-]*\.)?turn\.com/
      - ^https?://([A-Za-z0-9.-]*\.)?mathtag\.com/
      - ^https?://([A-Za-z0-9.-]*\.)?surveylink/
      - ^https?://([A-Za-z0-9.-]*\.)?info\.yahoo\.com/
      - ^https?://([A-Za-z0-9.-]*\.)?ads\.yahoo\.com/
      - ^https?://([A-Za-z0-9.-]*\.)?global\.ard\.yahoo\.com/
    replicaCount: 1
    resources: {}
    serviceDhcp:
      enabled: false
    serviceDns:
      annotations:
        "io.cilium/lb-ipam-ips": "192.168.0.240"                # Use Cilium as our Network Load Balancer
      externalTrafficPolicy: Cluster    # setting to 'local' normally tells a load balancer to only forward traffic to nodes
                                        # with at least 1 ready pod to avoid a second hop. From the Cilium doco, L2 announcements isn’t
                                        # currently aware of this setting and will announce the service IP on all nodes matching policies.
                                        # If a node without a pod receives traffic, it will drop it.
                                        # To fix this, we need to set the policy to .Spec.ExternalTrafficPolicy: Cluster.
                                        # This is what fixed it for me.  I had been pulling my hair out for days!
      mixedService: true
      port: 53
      type: LoadBalancer
    serviceWeb:
      http:
        enabled: true
        port: 80
      type: ClusterIP
    strategyType: RollingUpdate
    tolerations: []
    topologySpreadConstraints: []
    virtualHost: pi.hole
    webHttp: "80"
    webHttps: "443"
    whitelist:
      - translate.google.com
